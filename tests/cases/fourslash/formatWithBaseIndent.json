{
  "type": "Program",
  "body": [
    {
      "type": "VariableDeclaration",
      "declarations": [
        {
          "type": "VariableDeclarator",
          "id": {
            "type": "Identifier",
            "name": "originalOptions",
            "start": 4293,
            "end": 4308
          },
          "init": {
            "type": "CallExpression",
            "callee": {
              "type": "MemberExpression",
              "object": {
                "type": "Identifier",
                "name": "format",
                "start": 4311,
                "end": 4317
              },
              "property": {
                "type": "Identifier",
                "name": "copyFormatOptions",
                "start": 4318,
                "end": 4335
              },
              "computed": false,
              "optional": false,
              "start": 4311,
              "end": 4335
            },
            "arguments": [],
            "optional": false,
            "start": 4311,
            "end": 4337
          },
          "start": 4293,
          "end": 4337
        }
      ],
      "kind": "var",
      "start": 4289,
      "end": 4338
    },
    {
      "type": "VariableDeclaration",
      "declarations": [
        {
          "type": "VariableDeclarator",
          "id": {
            "type": "Identifier",
            "name": "copy",
            "start": 4344,
            "end": 4348
          },
          "init": {
            "type": "CallExpression",
            "callee": {
              "type": "MemberExpression",
              "object": {
                "type": "Identifier",
                "name": "format",
                "start": 4351,
                "end": 4357
              },
              "property": {
                "type": "Identifier",
                "name": "copyFormatOptions",
                "start": 4358,
                "end": 4375
              },
              "computed": false,
              "optional": false,
              "start": 4351,
              "end": 4375
            },
            "arguments": [],
            "optional": false,
            "start": 4351,
            "end": 4377
          },
          "start": 4344,
          "end": 4377
        }
      ],
      "kind": "var",
      "start": 4340,
      "end": 4378
    },
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "AssignmentExpression",
        "operator": "=",
        "left": {
          "type": "MemberExpression",
          "object": {
            "type": "Identifier",
            "name": "copy",
            "start": 4380,
            "end": 4384
          },
          "property": {
            "type": "Identifier",
            "name": "BaseIndentSize",
            "start": 4385,
            "end": 4399
          },
          "computed": false,
          "optional": false,
          "start": 4380,
          "end": 4399
        },
        "right": {
          "type": "Literal",
          "value": 10,
          "start": 4402,
          "end": 4404
        },
        "start": 4380,
        "end": 4404
      },
      "start": 4380,
      "end": 4405
    },
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "AssignmentExpression",
        "operator": "=",
        "left": {
          "type": "MemberExpression",
          "object": {
            "type": "Identifier",
            "name": "copy",
            "start": 4407,
            "end": 4411
          },
          "property": {
            "type": "Identifier",
            "name": "IndentSize",
            "start": 4412,
            "end": 4422
          },
          "computed": false,
          "optional": false,
          "start": 4407,
          "end": 4422
        },
        "right": {
          "type": "Literal",
          "value": 4,
          "start": 4425,
          "end": 4426
        },
        "start": 4407,
        "end": 4426
      },
      "start": 4407,
      "end": 4427
    },
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "CallExpression",
        "callee": {
          "type": "MemberExpression",
          "object": {
            "type": "Identifier",
            "name": "format",
            "start": 4431,
            "end": 4437
          },
          "property": {
            "type": "Identifier",
            "name": "setFormatOptions",
            "start": 4438,
            "end": 4454
          },
          "computed": false,
          "optional": false,
          "start": 4431,
          "end": 4454
        },
        "arguments": [
          {
            "type": "Identifier",
            "name": "copy",
            "start": 4455,
            "end": 4459
          }
        ],
        "optional": false,
        "start": 4431,
        "end": 4460
      },
      "start": 4431,
      "end": 4461
    },
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "CallExpression",
        "callee": {
          "type": "MemberExpression",
          "object": {
            "type": "Identifier",
            "name": "format",
            "start": 4463,
            "end": 4469
          },
          "property": {
            "type": "Identifier",
            "name": "document",
            "start": 4470,
            "end": 4478
          },
          "computed": false,
          "optional": false,
          "start": 4463,
          "end": 4478
        },
        "arguments": [],
        "optional": false,
        "start": 4463,
        "end": 4480
      },
      "start": 4463,
      "end": 4481
    },
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "CallExpression",
        "callee": {
          "type": "MemberExpression",
          "object": {
            "type": "Identifier",
            "name": "verify",
            "start": 4485,
            "end": 4491
          },
          "property": {
            "type": "Identifier",
            "name": "currentFileContentIs",
            "start": 4492,
            "end": 4512
          },
          "computed": false,
          "optional": false,
          "start": 4485,
          "end": 4512
        },
        "arguments": [
          {
            "type": "TemplateLiteral",
            "quasis": [
              {
                "type": "TemplateElement",
                "value": {
                  "raw": "\r\n          module classes {\r\n              class Bar {\r\n\r\n                  constructor() {\r\n                  }\r\n\r\n                  private foo: string = \"\";\r\n\r\n                  private f() {\r\n                      var a: any[] = [[1, 2], [3, 4], 5];\r\n                      return ((1 + 1));\r\n                  }\r\n\r\n                  private f2() {\r\n                      if (true) { } { };\r\n                  }\r\n              }\r\n          }\r\n\r\n\r\n          module interfaces {\r\n              interface Foo {\r\n\r\n                  x: number;\r\n\r\n                  foo(): number;\r\n              }\r\n          }\r\n\r\n\r\n          module nestedModules {\r\n              module Foo2 {\r\n                  function f() {\r\n                  }\r\n                  var x: number;\r\n              }\r\n          }\r\n\r\n\r\n          module Enums {\r\n              enum Foo3 {\r\n                  val1,\r\n                  val2,\r\n              }\r\n          }\r\n\r\n\r\n          function controlStatements() {\r\n              for (var i = 0; i < 10; i++) {\r\n              }\r\n\r\n              for (var e in foo.bar) {\r\n              }\r\n\r\n              with (foo.bar) {\r\n              }\r\n\r\n              while (false) {\r\n              }\r\n\r\n              do {\r\n              } while (false);\r\n\r\n              switch (foo.bar) {\r\n              }\r\n\r\n              switch (foo.bar) {\r\n                  case 1:\r\n                      break;\r\n                  default:\r\n                      break;\r\n              }\r\n          }\r\n\r\n\r\n          function tryCatch() {\r\n              try {\r\n              }\r\n              catch (err) {\r\n              }\r\n          }\r\n\r\n\r\n          function tryFinally() {\r\n              try {\r\n              }\r\n              finally {\r\n              }\r\n          }\r\n\r\n\r\n          function tryCatchFinally() {\r\n              try {\r\n              }\r\n              catch (err) {\r\n              }\r\n              finally {\r\n              }\r\n          }\r\n\r\n\r\n          class indentBeforeCurly {\r\n          }\r\n\r\n\r\n          function argumentsListIndentation(bar,\r\n              blah,\r\n          );\r\n\r\n\r\n          function blockIndentAfterIndentedParameter1(bar,\r\n              blah) {\r\n          }\r\n\r\n\r\n          function blockIndentAfterIndentedParameter2(bar,\r\n              blah) {\r\n              if (foo) {\r\n              }\r\n          }\r\n\r\n          var templateLiterals = \\`abcdefghi\r\njklmnop\r\nqrstuvwxyz\\`;",
                  "cooked": "\n          module classes {\n              class Bar {\n\n                  constructor() {\n                  }\n\n                  private foo: string = \"\";\n\n                  private f() {\n                      var a: any[] = [[1, 2], [3, 4], 5];\n                      return ((1 + 1));\n                  }\n\n                  private f2() {\n                      if (true) { } { };\n                  }\n              }\n          }\n\n\n          module interfaces {\n              interface Foo {\n\n                  x: number;\n\n                  foo(): number;\n              }\n          }\n\n\n          module nestedModules {\n              module Foo2 {\n                  function f() {\n                  }\n                  var x: number;\n              }\n          }\n\n\n          module Enums {\n              enum Foo3 {\n                  val1,\n                  val2,\n              }\n          }\n\n\n          function controlStatements() {\n              for (var i = 0; i < 10; i++) {\n              }\n\n              for (var e in foo.bar) {\n              }\n\n              with (foo.bar) {\n              }\n\n              while (false) {\n              }\n\n              do {\n              } while (false);\n\n              switch (foo.bar) {\n              }\n\n              switch (foo.bar) {\n                  case 1:\n                      break;\n                  default:\n                      break;\n              }\n          }\n\n\n          function tryCatch() {\n              try {\n              }\n              catch (err) {\n              }\n          }\n\n\n          function tryFinally() {\n              try {\n              }\n              finally {\n              }\n          }\n\n\n          function tryCatchFinally() {\n              try {\n              }\n              catch (err) {\n              }\n              finally {\n              }\n          }\n\n\n          class indentBeforeCurly {\n          }\n\n\n          function argumentsListIndentation(bar,\n              blah,\n          );\n\n\n          function blockIndentAfterIndentedParameter1(bar,\n              blah) {\n          }\n\n\n          function blockIndentAfterIndentedParameter2(bar,\n              blah) {\n              if (foo) {\n              }\n          }\n\n          var templateLiterals = `abcdefghi\njklmnop\nqrstuvwxyz`;"
                },
                "tail": true,
                "start": 4513,
                "end": 6911
              }
            ],
            "expressions": [],
            "start": 4513,
            "end": 6911
          }
        ],
        "optional": false,
        "start": 4485,
        "end": 6912
      },
      "start": 4485,
      "end": 6913
    },
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "CallExpression",
        "callee": {
          "type": "MemberExpression",
          "object": {
            "type": "Identifier",
            "name": "format",
            "start": 6917,
            "end": 6923
          },
          "property": {
            "type": "Identifier",
            "name": "setFormatOptions",
            "start": 6924,
            "end": 6940
          },
          "computed": false,
          "optional": false,
          "start": 6917,
          "end": 6940
        },
        "arguments": [
          {
            "type": "Identifier",
            "name": "originalOptions",
            "start": 6941,
            "end": 6956
          }
        ],
        "optional": false,
        "start": 6917,
        "end": 6957
      },
      "start": 6917,
      "end": 6958
    }
  ],
  "sourceType": "module",
  "start": 4289,
  "end": 6958
}