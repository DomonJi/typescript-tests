{
  "type": "Program",
  "body": [
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "CallExpression",
        "callee": {
          "type": "MemberExpression",
          "object": {
            "type": "Identifier",
            "name": "goTo",
            "start": 210,
            "end": 214
          },
          "property": {
            "type": "Identifier",
            "name": "select",
            "start": 215,
            "end": 221
          },
          "computed": false,
          "optional": false,
          "start": 210,
          "end": 221
        },
        "arguments": [
          {
            "type": "Literal",
            "value": "a",
            "start": 222,
            "end": 225
          },
          {
            "type": "Literal",
            "value": "b",
            "start": 227,
            "end": 230
          }
        ],
        "optional": false,
        "start": 210,
        "end": 231
      },
      "start": 210,
      "end": 232
    },
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "CallExpression",
        "callee": {
          "type": "MemberExpression",
          "object": {
            "type": "Identifier",
            "name": "edit",
            "start": 234,
            "end": 238
          },
          "property": {
            "type": "Identifier",
            "name": "applyRefactor",
            "start": 239,
            "end": 252
          },
          "computed": false,
          "optional": false,
          "start": 234,
          "end": 252
        },
        "arguments": [
          {
            "type": "ObjectExpression",
            "properties": [
              {
                "type": "Property",
                "key": {
                  "type": "Identifier",
                  "name": "refactorName",
                  "start": 260,
                  "end": 272
                },
                "value": {
                  "type": "Literal",
                  "value": "Convert to optional chain expression",
                  "start": 274,
                  "end": 312
                },
                "computed": false,
                "method": false,
                "shorthand": false,
                "kind": "init",
                "start": 260,
                "end": 312
              },
              {
                "type": "Property",
                "key": {
                  "type": "Identifier",
                  "name": "actionName",
                  "start": 319,
                  "end": 329
                },
                "value": {
                  "type": "Literal",
                  "value": "Convert to optional chain expression",
                  "start": 331,
                  "end": 369
                },
                "computed": false,
                "method": false,
                "shorthand": false,
                "kind": "init",
                "start": 319,
                "end": 369
              },
              {
                "type": "Property",
                "key": {
                  "type": "Identifier",
                  "name": "actionDescription",
                  "start": 376,
                  "end": 393
                },
                "value": {
                  "type": "Literal",
                  "value": "Convert to optional chain expression",
                  "start": 395,
                  "end": 433
                },
                "computed": false,
                "method": false,
                "shorthand": false,
                "kind": "init",
                "start": 376,
                "end": 433
              },
              {
                "type": "Property",
                "key": {
                  "type": "Identifier",
                  "name": "newContent",
                  "start": 440,
                  "end": 450
                },
                "value": {
                  "type": "TemplateLiteral",
                  "quasis": [
                    {
                      "type": "TemplateElement",
                      "value": {
                        "raw": "interface Foo {\r\n    bar?:{\r\n        baz?: string;\r\n    }\r\n}\r\ndeclare let foo: Foo | undefined;\r\nfoo?.bar?.baz;",
                        "cooked": "interface Foo {\n    bar?:{\n        baz?: string;\n    }\n}\ndeclare let foo: Foo | undefined;\nfoo?.bar?.baz;"
                      },
                      "tail": true,
                      "start": 453,
                      "end": 566
                    }
                  ],
                  "expressions": [],
                  "start": 453,
                  "end": 566
                },
                "computed": false,
                "method": false,
                "shorthand": false,
                "kind": "init",
                "start": 440,
                "end": 566
              }
            ],
            "start": 253,
            "end": 569
          }
        ],
        "optional": false,
        "start": 234,
        "end": 570
      },
      "start": 234,
      "end": 571
    }
  ],
  "sourceType": "module",
  "start": 210,
  "end": 571
}