{
  "type": "Program",
  "body": [
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "CallExpression",
        "callee": {
          "type": "MemberExpression",
          "object": {
            "type": "Identifier",
            "name": "format",
            "start": 634,
            "end": 640
          },
          "property": {
            "type": "Identifier",
            "name": "document",
            "start": 641,
            "end": 649
          },
          "computed": false,
          "optional": false,
          "start": 634,
          "end": 649
        },
        "arguments": [],
        "optional": false,
        "start": 634,
        "end": 651
      },
      "start": 634,
      "end": 652
    },
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "CallExpression",
        "callee": {
          "type": "MemberExpression",
          "object": {
            "type": "Identifier",
            "name": "verify",
            "start": 656,
            "end": 662
          },
          "property": {
            "type": "Identifier",
            "name": "currentFileContentIs",
            "start": 663,
            "end": 683
          },
          "computed": false,
          "optional": false,
          "start": 656,
          "end": 683
        },
        "arguments": [
          {
            "type": "TemplateLiteral",
            "quasis": [
              {
                "type": "TemplateElement",
                "value": {
                  "raw": "const a = (\r\n    <div>\r\n        foo\r\n    </div>\r\n);\r\n\r\nconst b = (\r\n    <div>\r\n        {foo}\r\n    </div>\r\n);\r\n\r\nconst c = (\r\n    <div>\r\n        foo\r\n        {foobar}\r\n        bar\r\n    </div>\r\n);\r\n\r\nconst d =\r\n    <div>\r\n        foo\r\n    </div>;\r\n\r\nconst e =\r\n    <div>\r\n        {foo}\r\n    </div>\r\n\r\nconst f =\r\n    <div>\r\n        foo\r\n        {foobar}\r\n        bar\r\n    </div>",
                  "cooked": "const a = (\n    <div>\n        foo\n    </div>\n);\n\nconst b = (\n    <div>\n        {foo}\n    </div>\n);\n\nconst c = (\n    <div>\n        foo\n        {foobar}\n        bar\n    </div>\n);\n\nconst d =\n    <div>\n        foo\n    </div>;\n\nconst e =\n    <div>\n        {foo}\n    </div>\n\nconst f =\n    <div>\n        foo\n        {foobar}\n        bar\n    </div>"
                },
                "tail": true,
                "start": 686,
                "end": 1063
              }
            ],
            "expressions": [],
            "start": 686,
            "end": 1063
          }
        ],
        "optional": false,
        "start": 656,
        "end": 1064
      },
      "start": 656,
      "end": 1065
    }
  ],
  "sourceType": "module",
  "start": 634,
  "end": 1065
}