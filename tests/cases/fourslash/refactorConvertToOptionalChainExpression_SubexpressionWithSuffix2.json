{
  "type": "Program",
  "body": [
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "CallExpression",
        "callee": {
          "type": "MemberExpression",
          "object": {
            "type": "Identifier",
            "name": "goTo",
            "start": 201,
            "end": 205
          },
          "property": {
            "type": "Identifier",
            "name": "select",
            "start": 206,
            "end": 212
          },
          "computed": false,
          "optional": false,
          "start": 201,
          "end": 212
        },
        "arguments": [
          {
            "type": "Literal",
            "value": "a",
            "start": 213,
            "end": 216
          },
          {
            "type": "Literal",
            "value": "b",
            "start": 218,
            "end": 221
          }
        ],
        "optional": false,
        "start": 201,
        "end": 222
      },
      "start": 201,
      "end": 223
    },
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "CallExpression",
        "callee": {
          "type": "MemberExpression",
          "object": {
            "type": "Identifier",
            "name": "edit",
            "start": 225,
            "end": 229
          },
          "property": {
            "type": "Identifier",
            "name": "applyRefactor",
            "start": 230,
            "end": 243
          },
          "computed": false,
          "optional": false,
          "start": 225,
          "end": 243
        },
        "arguments": [
          {
            "type": "ObjectExpression",
            "properties": [
              {
                "type": "Property",
                "key": {
                  "type": "Identifier",
                  "name": "refactorName",
                  "start": 251,
                  "end": 263
                },
                "value": {
                  "type": "Literal",
                  "value": "Convert to optional chain expression",
                  "start": 265,
                  "end": 303
                },
                "computed": false,
                "method": false,
                "shorthand": false,
                "kind": "init",
                "start": 251,
                "end": 303
              },
              {
                "type": "Property",
                "key": {
                  "type": "Identifier",
                  "name": "actionName",
                  "start": 310,
                  "end": 320
                },
                "value": {
                  "type": "Literal",
                  "value": "Convert to optional chain expression",
                  "start": 322,
                  "end": 360
                },
                "computed": false,
                "method": false,
                "shorthand": false,
                "kind": "init",
                "start": 310,
                "end": 360
              },
              {
                "type": "Property",
                "key": {
                  "type": "Identifier",
                  "name": "actionDescription",
                  "start": 367,
                  "end": 384
                },
                "value": {
                  "type": "Literal",
                  "value": "Convert to optional chain expression",
                  "start": 386,
                  "end": 424
                },
                "computed": false,
                "method": false,
                "shorthand": false,
                "kind": "init",
                "start": 367,
                "end": 424
              },
              {
                "type": "Property",
                "key": {
                  "type": "Identifier",
                  "name": "newContent",
                  "start": 431,
                  "end": 441
                },
                "value": {
                  "type": "TemplateLiteral",
                  "quasis": [
                    {
                      "type": "TemplateElement",
                      "value": {
                        "raw": "let a = { b: 0 };\r\nlet x = { y: 0 };\r\na?.b() && x && x.y();",
                        "cooked": "let a = { b: 0 };\nlet x = { y: 0 };\na?.b() && x && x.y();"
                      },
                      "tail": true,
                      "start": 444,
                      "end": 505
                    }
                  ],
                  "expressions": [],
                  "start": 444,
                  "end": 505
                },
                "computed": false,
                "method": false,
                "shorthand": false,
                "kind": "init",
                "start": 431,
                "end": 505
              }
            ],
            "start": 244,
            "end": 508
          }
        ],
        "optional": false,
        "start": 225,
        "end": 509
      },
      "start": 225,
      "end": 510
    }
  ],
  "sourceType": "module",
  "start": 201,
  "end": 510
}