{
  "type": "Program",
  "body": [
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "CallExpression",
        "callee": {
          "type": "MemberExpression",
          "object": {
            "type": "Identifier",
            "name": "goTo",
            "start": 86,
            "end": 90
          },
          "property": {
            "type": "Identifier",
            "name": "select",
            "start": 91,
            "end": 97
          },
          "computed": false,
          "optional": false,
          "start": 86,
          "end": 97
        },
        "arguments": [
          {
            "type": "Literal",
            "value": "x",
            "start": 98,
            "end": 101
          },
          {
            "type": "Literal",
            "value": "y",
            "start": 103,
            "end": 106
          }
        ],
        "optional": false,
        "start": 86,
        "end": 107
      },
      "start": 86,
      "end": 108
    },
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "CallExpression",
        "callee": {
          "type": "MemberExpression",
          "object": {
            "type": "Identifier",
            "name": "edit",
            "start": 110,
            "end": 114
          },
          "property": {
            "type": "Identifier",
            "name": "applyRefactor",
            "start": 115,
            "end": 128
          },
          "computed": false,
          "optional": false,
          "start": 110,
          "end": 128
        },
        "arguments": [
          {
            "type": "ObjectExpression",
            "properties": [
              {
                "type": "Property",
                "key": {
                  "type": "Identifier",
                  "name": "refactorName",
                  "start": 136,
                  "end": 148
                },
                "value": {
                  "type": "Literal",
                  "value": "Convert arrow function or function expression",
                  "start": 150,
                  "end": 197
                },
                "computed": false,
                "method": false,
                "shorthand": false,
                "kind": "init",
                "start": 136,
                "end": 197
              },
              {
                "type": "Property",
                "key": {
                  "type": "Identifier",
                  "name": "actionName",
                  "start": 204,
                  "end": 214
                },
                "value": {
                  "type": "Literal",
                  "value": "Convert to named function",
                  "start": 216,
                  "end": 243
                },
                "computed": false,
                "method": false,
                "shorthand": false,
                "kind": "init",
                "start": 204,
                "end": 243
              },
              {
                "type": "Property",
                "key": {
                  "type": "Identifier",
                  "name": "actionDescription",
                  "start": 250,
                  "end": 267
                },
                "value": {
                  "type": "Literal",
                  "value": "Convert to named function",
                  "start": 269,
                  "end": 296
                },
                "computed": false,
                "method": false,
                "shorthand": false,
                "kind": "init",
                "start": 250,
                "end": 296
              },
              {
                "type": "Property",
                "key": {
                  "type": "Identifier",
                  "name": "newContent",
                  "start": 303,
                  "end": 313
                },
                "value": {
                  "type": "TemplateLiteral",
                  "quasis": [
                    {
                      "type": "TemplateElement",
                      "value": {
                        "raw": "let foo;\r\nfunction bar(a) {\r\n    return 1 + a;\r\n}\r\n",
                        "cooked": "let foo;\nfunction bar(a) {\n    return 1 + a;\n}\n"
                      },
                      "tail": true,
                      "start": 315,
                      "end": 368
                    }
                  ],
                  "expressions": [],
                  "start": 315,
                  "end": 368
                },
                "computed": false,
                "method": false,
                "shorthand": false,
                "kind": "init",
                "start": 303,
                "end": 368
              }
            ],
            "start": 129,
            "end": 372
          }
        ],
        "optional": false,
        "start": 110,
        "end": 373
      },
      "start": 110,
      "end": 374
    }
  ],
  "sourceType": "module",
  "start": 86,
  "end": 376
}