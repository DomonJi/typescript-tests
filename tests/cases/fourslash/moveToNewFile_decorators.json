{
  "type": "Program",
  "body": [
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "CallExpression",
        "callee": {
          "type": "MemberExpression",
          "object": {
            "type": "Identifier",
            "name": "verify",
            "start": 427,
            "end": 433
          },
          "property": {
            "type": "Identifier",
            "name": "noErrors",
            "start": 434,
            "end": 442
          },
          "computed": false,
          "optional": false,
          "start": 427,
          "end": 442
        },
        "arguments": [],
        "optional": false,
        "start": 427,
        "end": 444
      },
      "start": 427,
      "end": 445
    },
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "CallExpression",
        "callee": {
          "type": "MemberExpression",
          "object": {
            "type": "Identifier",
            "name": "verify",
            "start": 447,
            "end": 453
          },
          "property": {
            "type": "Identifier",
            "name": "moveToNewFile",
            "start": 454,
            "end": 467
          },
          "computed": false,
          "optional": false,
          "start": 447,
          "end": 467
        },
        "arguments": [
          {
            "type": "ObjectExpression",
            "properties": [
              {
                "type": "Property",
                "key": {
                  "type": "Identifier",
                  "name": "newFileContents",
                  "start": 474,
                  "end": 489
                },
                "value": {
                  "type": "ObjectExpression",
                  "properties": [
                    {
                      "type": "Property",
                      "key": {
                        "type": "Literal",
                        "value": "/a.ts",
                        "start": 501,
                        "end": 508
                      },
                      "value": {
                        "type": "TemplateLiteral",
                        "quasis": [
                          {
                            "type": "TemplateElement",
                            "value": {
                              "raw": "const decorator1: any = () => {};\nconst decorator2: any = () => {};\n",
                              "cooked": "const decorator1: any = () => {};\nconst decorator2: any = () => {};\n"
                            },
                            "tail": true,
                            "start": 510,
                            "end": 580
                          }
                        ],
                        "expressions": [],
                        "start": 510,
                        "end": 580
                      },
                      "computed": false,
                      "method": false,
                      "shorthand": false,
                      "kind": "init",
                      "start": 501,
                      "end": 580
                    },
                    {
                      "type": "Property",
                      "key": {
                        "type": "Literal",
                        "value": "/Foo.ts",
                        "start": 590,
                        "end": 599
                      },
                      "value": {
                        "type": "TemplateLiteral",
                        "quasis": [
                          {
                            "type": "TemplateElement",
                            "value": {
                              "raw": "class Foo {\n    constructor(@decorator1 private readonly x: number,\n        @decorator1 @decorator2 private readonly y: number) { }\n\n    method1(@decorator1 x: number) { }\n    method2(@decorator1 @decorator2 x: number) { }\n}\n",
                              "cooked": "class Foo {\n    constructor(@decorator1 private readonly x: number,\n        @decorator1 @decorator2 private readonly y: number) { }\n\n    method1(@decorator1 x: number) { }\n    method2(@decorator1 @decorator2 x: number) { }\n}\n"
                            },
                            "tail": true,
                            "start": 601,
                            "end": 828
                          }
                        ],
                        "expressions": [],
                        "start": 601,
                        "end": 828
                      },
                      "computed": false,
                      "method": false,
                      "shorthand": false,
                      "kind": "init",
                      "start": 590,
                      "end": 828
                    }
                  ],
                  "start": 491,
                  "end": 834
                },
                "computed": false,
                "method": false,
                "shorthand": false,
                "kind": "init",
                "start": 474,
                "end": 834
              }
            ],
            "start": 468,
            "end": 836
          }
        ],
        "optional": false,
        "start": 447,
        "end": 837
      },
      "start": 447,
      "end": 838
    }
  ],
  "sourceType": "module",
  "start": 427,
  "end": 839
}