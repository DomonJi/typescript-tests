{
  "type": "Program",
  "body": [
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "CallExpression",
        "callee": {
          "type": "MemberExpression",
          "object": {
            "type": "Identifier",
            "name": "goTo",
            "start": 229,
            "end": 233
          },
          "property": {
            "type": "Identifier",
            "name": "select",
            "start": 234,
            "end": 240
          },
          "computed": false,
          "optional": false,
          "start": 229,
          "end": 240
        },
        "arguments": [
          {
            "type": "Literal",
            "value": "a",
            "start": 241,
            "end": 244
          },
          {
            "type": "Literal",
            "value": "b",
            "start": 246,
            "end": 249
          }
        ],
        "optional": false,
        "start": 229,
        "end": 250
      },
      "start": 229,
      "end": 251
    },
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "CallExpression",
        "callee": {
          "type": "MemberExpression",
          "object": {
            "type": "Identifier",
            "name": "edit",
            "start": 253,
            "end": 257
          },
          "property": {
            "type": "Identifier",
            "name": "applyRefactor",
            "start": 258,
            "end": 271
          },
          "computed": false,
          "optional": false,
          "start": 253,
          "end": 271
        },
        "arguments": [
          {
            "type": "ObjectExpression",
            "properties": [
              {
                "type": "Property",
                "key": {
                  "type": "Identifier",
                  "name": "refactorName",
                  "start": 279,
                  "end": 291
                },
                "value": {
                  "type": "Literal",
                  "value": "Convert to optional chain expression",
                  "start": 293,
                  "end": 331
                },
                "computed": false,
                "method": false,
                "shorthand": false,
                "kind": "init",
                "start": 279,
                "end": 331
              },
              {
                "type": "Property",
                "key": {
                  "type": "Identifier",
                  "name": "actionName",
                  "start": 338,
                  "end": 348
                },
                "value": {
                  "type": "Literal",
                  "value": "Convert to optional chain expression",
                  "start": 350,
                  "end": 388
                },
                "computed": false,
                "method": false,
                "shorthand": false,
                "kind": "init",
                "start": 338,
                "end": 388
              },
              {
                "type": "Property",
                "key": {
                  "type": "Identifier",
                  "name": "actionDescription",
                  "start": 395,
                  "end": 412
                },
                "value": {
                  "type": "Literal",
                  "value": "Convert to optional chain expression",
                  "start": 414,
                  "end": 452
                },
                "computed": false,
                "method": false,
                "shorthand": false,
                "kind": "init",
                "start": 395,
                "end": 452
              },
              {
                "type": "Property",
                "key": {
                  "type": "Identifier",
                  "name": "newContent",
                  "start": 459,
                  "end": 469
                },
                "value": {
                  "type": "TemplateLiteral",
                  "quasis": [
                    {
                      "type": "TemplateElement",
                      "value": {
                        "raw": "interface Foo {\r\n    bar:{\r\n        baz: string;\r\n    }\r\n}\r\ndeclare let foo: Foo;\r\nfoo?.bar?.baz ?? \"whenFalse\";",
                        "cooked": "interface Foo {\n    bar:{\n        baz: string;\n    }\n}\ndeclare let foo: Foo;\nfoo?.bar?.baz ?? \"whenFalse\";"
                      },
                      "tail": true,
                      "start": 472,
                      "end": 586
                    }
                  ],
                  "expressions": [],
                  "start": 472,
                  "end": 586
                },
                "computed": false,
                "method": false,
                "shorthand": false,
                "kind": "init",
                "start": 459,
                "end": 586
              }
            ],
            "start": 272,
            "end": 589
          }
        ],
        "optional": false,
        "start": 253,
        "end": 590
      },
      "start": 253,
      "end": 591
    }
  ],
  "sourceType": "module",
  "start": 229,
  "end": 591
}