{
  "type": "Program",
  "body": [
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "CallExpression",
        "callee": {
          "type": "MemberExpression",
          "object": {
            "type": "Identifier",
            "name": "goTo",
            "start": 134,
            "end": 138
          },
          "property": {
            "type": "Identifier",
            "name": "select",
            "start": 139,
            "end": 145
          },
          "computed": false,
          "optional": false,
          "start": 134,
          "end": 145
        },
        "arguments": [
          {
            "type": "Literal",
            "value": "x",
            "start": 146,
            "end": 149
          },
          {
            "type": "Literal",
            "value": "y",
            "start": 151,
            "end": 154
          }
        ],
        "optional": false,
        "start": 134,
        "end": 155
      },
      "start": 134,
      "end": 156
    },
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "CallExpression",
        "callee": {
          "type": "MemberExpression",
          "object": {
            "type": "Identifier",
            "name": "edit",
            "start": 158,
            "end": 162
          },
          "property": {
            "type": "Identifier",
            "name": "applyRefactor",
            "start": 163,
            "end": 176
          },
          "computed": false,
          "optional": false,
          "start": 158,
          "end": 176
        },
        "arguments": [
          {
            "type": "ObjectExpression",
            "properties": [
              {
                "type": "Property",
                "key": {
                  "type": "Identifier",
                  "name": "refactorName",
                  "start": 184,
                  "end": 196
                },
                "value": {
                  "type": "Literal",
                  "value": "Convert arrow function or function expression",
                  "start": 198,
                  "end": 245
                },
                "computed": false,
                "method": false,
                "shorthand": false,
                "kind": "init",
                "start": 184,
                "end": 245
              },
              {
                "type": "Property",
                "key": {
                  "type": "Identifier",
                  "name": "actionName",
                  "start": 252,
                  "end": 262
                },
                "value": {
                  "type": "Literal",
                  "value": "Convert to arrow function",
                  "start": 264,
                  "end": 291
                },
                "computed": false,
                "method": false,
                "shorthand": false,
                "kind": "init",
                "start": 252,
                "end": 291
              },
              {
                "type": "Property",
                "key": {
                  "type": "Identifier",
                  "name": "actionDescription",
                  "start": 298,
                  "end": 315
                },
                "value": {
                  "type": "Literal",
                  "value": "Convert to arrow function",
                  "start": 317,
                  "end": 344
                },
                "computed": false,
                "method": false,
                "shorthand": false,
                "kind": "init",
                "start": 298,
                "end": 344
              },
              {
                "type": "Property",
                "key": {
                  "type": "Identifier",
                  "name": "newContent",
                  "start": 351,
                  "end": 361
                },
                "value": {
                  "type": "TemplateLiteral",
                  "quasis": [
                    {
                      "type": "TemplateElement",
                      "value": {
                        "raw": "const foo = () => {\r\n    for (let i = 0; i < 5; i++) { }\r\n};",
                        "cooked": "const foo = () => {\n    for (let i = 0; i < 5; i++) { }\n};"
                      },
                      "tail": true,
                      "start": 363,
                      "end": 425
                    }
                  ],
                  "expressions": [],
                  "start": 363,
                  "end": 425
                },
                "computed": false,
                "method": false,
                "shorthand": false,
                "kind": "init",
                "start": 351,
                "end": 425
              }
            ],
            "start": 177,
            "end": 429
          }
        ],
        "optional": false,
        "start": 158,
        "end": 430
      },
      "start": 158,
      "end": 431
    }
  ],
  "sourceType": "script",
  "start": 134,
  "end": 433
}