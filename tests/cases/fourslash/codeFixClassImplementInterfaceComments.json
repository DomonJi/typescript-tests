{
  "type": "Program",
  "body": [
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "CallExpression",
        "callee": {
          "type": "MemberExpression",
          "object": {
            "type": "Identifier",
            "name": "verify",
            "start": 1104,
            "end": 1110
          },
          "property": {
            "type": "Identifier",
            "name": "codeFix",
            "start": 1111,
            "end": 1118
          },
          "computed": false,
          "optional": false,
          "start": 1104,
          "end": 1118
        },
        "arguments": [
          {
            "type": "ObjectExpression",
            "properties": [
              {
                "type": "Property",
                "key": {
                  "type": "Identifier",
                  "name": "description",
                  "start": 1125,
                  "end": 1136
                },
                "value": {
                  "type": "Literal",
                  "value": "Implement interface 'N.I'",
                  "start": 1138,
                  "end": 1165
                },
                "computed": false,
                "method": false,
                "shorthand": false,
                "kind": "init",
                "start": 1125,
                "end": 1165
              },
              {
                "type": "Property",
                "key": {
                  "type": "Identifier",
                  "name": "newFileContent",
                  "start": 1171,
                  "end": 1185
                },
                "value": {
                  "type": "TemplateLiteral",
                  "quasis": [
                    {
                      "type": "TemplateElement",
                      "value": {
                        "raw": "namespace N {\n    /**enum prefix */\n    export enum /**enum identifier prefix */ E /**open-brace prefix*/ {\n    /* literal prefix */ a /** comma prefix */,\n    /* literal prefix */ b /** comma prefix */,\n    /* literal prefix */ c\n    /** close brace prefix */ }\n    /** interface prefix */\n    export interface /**interface name prefix */ I /**open-brace prefix*/ {\n    /** property prefix */ a /** colon prefix */: /** enum literal prefix 1*/ E /** dot prefix */. /** enum literal prefix 2*/a;\n    /** property prefix */ b /** colon prefix */: /** enum prefix */ E;\n    /**method signature prefix */foo /**open angle prefix */< /**type parameter name prefix */ X /** closing angle prefix */> /**open paren prefix */(/** parameter prefix */ a/** colon prefix */: /** parameter type prefix */ X /** close paren prefix */) /** colon prefix */: /** return type prefix */ string /** semicolon prefix */;\n        /**close-brace prefix*/ }\n/**close-brace prefix*/ }\nclass C implements N.I {\n    a: N.E.a;\n    b: N.E;\n    foo<X>(a: X): string {\n        throw new Error(\"Method not implemented.\");\n    }\n}",
                        "cooked": "namespace N {\n    /**enum prefix */\n    export enum /**enum identifier prefix */ E /**open-brace prefix*/ {\n    /* literal prefix */ a /** comma prefix */,\n    /* literal prefix */ b /** comma prefix */,\n    /* literal prefix */ c\n    /** close brace prefix */ }\n    /** interface prefix */\n    export interface /**interface name prefix */ I /**open-brace prefix*/ {\n    /** property prefix */ a /** colon prefix */: /** enum literal prefix 1*/ E /** dot prefix */. /** enum literal prefix 2*/a;\n    /** property prefix */ b /** colon prefix */: /** enum prefix */ E;\n    /**method signature prefix */foo /**open angle prefix */< /**type parameter name prefix */ X /** closing angle prefix */> /**open paren prefix */(/** parameter prefix */ a/** colon prefix */: /** parameter type prefix */ X /** close paren prefix */) /** colon prefix */: /** return type prefix */ string /** semicolon prefix */;\n        /**close-brace prefix*/ }\n/**close-brace prefix*/ }\nclass C implements N.I {\n    a: N.E.a;\n    b: N.E;\n    foo<X>(a: X): string {\n        throw new Error(\"Method not implemented.\");\n    }\n}"
                      },
                      "tail": true,
                      "start": 1187,
                      "end": 2287
                    }
                  ],
                  "expressions": [],
                  "start": 1187,
                  "end": 2287
                },
                "computed": false,
                "method": false,
                "shorthand": false,
                "kind": "init",
                "start": 1171,
                "end": 2287
              }
            ],
            "start": 1119,
            "end": 2290
          }
        ],
        "optional": false,
        "start": 1104,
        "end": 2291
      },
      "start": 1104,
      "end": 2292
    }
  ],
  "sourceType": "script",
  "start": 1104,
  "end": 2293
}