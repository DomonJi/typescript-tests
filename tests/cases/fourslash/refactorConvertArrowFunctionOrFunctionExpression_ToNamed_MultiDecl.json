{
  "type": "Program",
  "body": [
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "CallExpression",
        "callee": {
          "type": "MemberExpression",
          "object": {
            "type": "Identifier",
            "name": "goTo",
            "start": 96,
            "end": 100
          },
          "property": {
            "type": "Identifier",
            "name": "select",
            "start": 101,
            "end": 107
          },
          "computed": false,
          "optional": false,
          "start": 96,
          "end": 107
        },
        "arguments": [
          {
            "type": "Literal",
            "value": "x",
            "start": 108,
            "end": 111
          },
          {
            "type": "Literal",
            "value": "y",
            "start": 113,
            "end": 116
          }
        ],
        "optional": false,
        "start": 96,
        "end": 117
      },
      "start": 96,
      "end": 118
    },
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "CallExpression",
        "callee": {
          "type": "MemberExpression",
          "object": {
            "type": "Identifier",
            "name": "edit",
            "start": 120,
            "end": 124
          },
          "property": {
            "type": "Identifier",
            "name": "applyRefactor",
            "start": 125,
            "end": 138
          },
          "computed": false,
          "optional": false,
          "start": 120,
          "end": 138
        },
        "arguments": [
          {
            "type": "ObjectExpression",
            "properties": [
              {
                "type": "Property",
                "key": {
                  "type": "Identifier",
                  "name": "refactorName",
                  "start": 146,
                  "end": 158
                },
                "value": {
                  "type": "Literal",
                  "value": "Convert arrow function or function expression",
                  "start": 160,
                  "end": 207
                },
                "computed": false,
                "method": false,
                "shorthand": false,
                "kind": "init",
                "start": 146,
                "end": 207
              },
              {
                "type": "Property",
                "key": {
                  "type": "Identifier",
                  "name": "actionName",
                  "start": 214,
                  "end": 224
                },
                "value": {
                  "type": "Literal",
                  "value": "Convert to named function",
                  "start": 226,
                  "end": 253
                },
                "computed": false,
                "method": false,
                "shorthand": false,
                "kind": "init",
                "start": 214,
                "end": 253
              },
              {
                "type": "Property",
                "key": {
                  "type": "Identifier",
                  "name": "actionDescription",
                  "start": 260,
                  "end": 277
                },
                "value": {
                  "type": "Literal",
                  "value": "Convert to named function",
                  "start": 279,
                  "end": 306
                },
                "computed": false,
                "method": false,
                "shorthand": false,
                "kind": "init",
                "start": 260,
                "end": 306
              },
              {
                "type": "Property",
                "key": {
                  "type": "Identifier",
                  "name": "newContent",
                  "start": 313,
                  "end": 323
                },
                "value": {
                  "type": "TemplateLiteral",
                  "quasis": [
                    {
                      "type": "TemplateElement",
                      "value": {
                        "raw": "let foo, magicNo;\r\nfunction bar() {\r\n    return 1 + 1;\r\n}\r\n",
                        "cooked": "let foo, magicNo;\nfunction bar() {\n    return 1 + 1;\n}\n"
                      },
                      "tail": true,
                      "start": 325,
                      "end": 386
                    }
                  ],
                  "expressions": [],
                  "start": 325,
                  "end": 386
                },
                "computed": false,
                "method": false,
                "shorthand": false,
                "kind": "init",
                "start": 313,
                "end": 386
              }
            ],
            "start": 139,
            "end": 390
          }
        ],
        "optional": false,
        "start": 120,
        "end": 391
      },
      "start": 120,
      "end": 392
    }
  ],
  "sourceType": "module",
  "start": 96,
  "end": 394
}