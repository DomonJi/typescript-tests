{
  "type": "Program",
  "body": [
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "CallExpression",
        "callee": {
          "type": "MemberExpression",
          "object": {
            "type": "Identifier",
            "name": "verify",
            "start": 1434,
            "end": 1440
          },
          "property": {
            "type": "Identifier",
            "name": "codeFixAll",
            "start": 1441,
            "end": 1451
          },
          "computed": false,
          "optional": false,
          "start": 1434,
          "end": 1451
        },
        "arguments": [
          {
            "type": "ObjectExpression",
            "properties": [
              {
                "type": "Property",
                "key": {
                  "type": "Identifier",
                  "name": "fixId",
                  "start": 1458,
                  "end": 1463
                },
                "value": {
                  "type": "Literal",
                  "value": "unusedIdentifier_delete",
                  "start": 1465,
                  "end": 1490
                },
                "computed": false,
                "method": false,
                "shorthand": false,
                "kind": "init",
                "start": 1458,
                "end": 1490
              },
              {
                "type": "Property",
                "key": {
                  "type": "Identifier",
                  "name": "fixAllDescription",
                  "start": 1496,
                  "end": 1513
                },
                "value": {
                  "type": "MemberExpression",
                  "object": {
                    "type": "MemberExpression",
                    "object": {
                      "type": "MemberExpression",
                      "object": {
                        "type": "Identifier",
                        "name": "ts",
                        "start": 1515,
                        "end": 1517
                      },
                      "property": {
                        "type": "Identifier",
                        "name": "Diagnostics",
                        "start": 1518,
                        "end": 1529
                      },
                      "computed": false,
                      "optional": false,
                      "start": 1515,
                      "end": 1529
                    },
                    "property": {
                      "type": "Identifier",
                      "name": "Delete_all_unused_declarations",
                      "start": 1530,
                      "end": 1560
                    },
                    "computed": false,
                    "optional": false,
                    "start": 1515,
                    "end": 1560
                  },
                  "property": {
                    "type": "Identifier",
                    "name": "message",
                    "start": 1561,
                    "end": 1568
                  },
                  "computed": false,
                  "optional": false,
                  "start": 1515,
                  "end": 1568
                },
                "computed": false,
                "method": false,
                "shorthand": false,
                "kind": "init",
                "start": 1496,
                "end": 1568
              },
              {
                "type": "Property",
                "key": {
                  "type": "Identifier",
                  "name": "newFileContent",
                  "start": 1574,
                  "end": 1588
                },
                "value": {
                  "type": "TemplateLiteral",
                  "quasis": [
                    {
                      "type": "TemplateElement",
                      "value": {
                        "raw": "import d from \"foo\";\nimport d2, { used1 } from \"foo\";\nimport { x } from \"foo\";\nimport { x2, used2 } from \"foo\";\nused1; used2;\n\nfunction f() {\n}\nfunction g(a) { return a; }\nfunction h(c) { return c; }\nf(); g(); h();\n\ninterface I {\n    m(x: number): void;\n}\n\nclass C implements I {\n    m(x: number): void {} // Does not remove 'x', which is inherited\n    n(): void {}\n}\nC;\n\ndeclare function takesCb(cb: (x: number, y: string) => void): void;\ntakesCb(() => {});\ntakesCb((x) => { x; });\ntakesCb((x, y) => { y; });\n\nfunction fn1(x: number, y: string): void {}\ntakesCb(fn1);\n\nfunction fn2(x: number, y: string): void { x; }\ntakesCb(fn2);\n\nfunction fn3(x: number, y: string): void { y; }\ntakesCb(fn3);\n\n() => {\n};\n\n{\n}\nfor (; ;) {}\nfor (const {} of []) {}\nfor (const {} in {}) {}\n\nexport type First<T> = T;\nexport interface ISecond<U> { u: U; }\nexport const cls = class<U> { u: U; };\nexport class Ctu {}\nexport type Length<T> = T extends ArrayLike<infer U> ? number : never; // Not affected, can't delete",
                        "cooked": "import d from \"foo\";\nimport d2, { used1 } from \"foo\";\nimport { x } from \"foo\";\nimport { x2, used2 } from \"foo\";\nused1; used2;\n\nfunction f() {\n}\nfunction g(a) { return a; }\nfunction h(c) { return c; }\nf(); g(); h();\n\ninterface I {\n    m(x: number): void;\n}\n\nclass C implements I {\n    m(x: number): void {} // Does not remove 'x', which is inherited\n    n(): void {}\n}\nC;\n\ndeclare function takesCb(cb: (x: number, y: string) => void): void;\ntakesCb(() => {});\ntakesCb((x) => { x; });\ntakesCb((x, y) => { y; });\n\nfunction fn1(x: number, y: string): void {}\ntakesCb(fn1);\n\nfunction fn2(x: number, y: string): void { x; }\ntakesCb(fn2);\n\nfunction fn3(x: number, y: string): void { y; }\ntakesCb(fn3);\n\n() => {\n};\n\n{\n}\nfor (; ;) {}\nfor (const {} of []) {}\nfor (const {} in {}) {}\n\nexport type First<T> = T;\nexport interface ISecond<U> { u: U; }\nexport const cls = class<U> { u: U; };\nexport class Ctu {}\nexport type Length<T> = T extends ArrayLike<infer U> ? number : never; // Not affected, can't delete"
                      },
                      "tail": true,
                      "start": 1590,
                      "end": 2589
                    }
                  ],
                  "expressions": [],
                  "start": 1590,
                  "end": 2589
                },
                "computed": false,
                "method": false,
                "shorthand": false,
                "kind": "init",
                "start": 1574,
                "end": 2589
              }
            ],
            "start": 1452,
            "end": 2592
          }
        ],
        "optional": false,
        "start": 1434,
        "end": 2593
      },
      "start": 1434,
      "end": 2594
    }
  ],
  "sourceType": "script",
  "start": 1434,
  "end": 2595
}