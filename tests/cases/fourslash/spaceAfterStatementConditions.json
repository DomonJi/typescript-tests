{
  "type": "Program",
  "body": [
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "CallExpression",
        "callee": {
          "type": "MemberExpression",
          "object": {
            "type": "Identifier",
            "name": "format",
            "start": 429,
            "end": 435
          },
          "property": {
            "type": "Identifier",
            "name": "document",
            "start": 436,
            "end": 444
          },
          "computed": false,
          "optional": false,
          "start": 429,
          "end": 444
        },
        "arguments": [],
        "optional": false,
        "start": 429,
        "end": 446
      },
      "start": 429,
      "end": 447
    },
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "CallExpression",
        "callee": {
          "type": "MemberExpression",
          "object": {
            "type": "Identifier",
            "name": "verify",
            "start": 448,
            "end": 454
          },
          "property": {
            "type": "Identifier",
            "name": "currentFileContentIs",
            "start": 455,
            "end": 475
          },
          "computed": false,
          "optional": false,
          "start": 448,
          "end": 475
        },
        "arguments": [
          {
            "type": "TemplateLiteral",
            "quasis": [
              {
                "type": "TemplateElement",
                "value": {
                  "raw": "let i = 0;\n\nif (i < 0) ++i;\nif (i < 0) --i;\n\nwhile (i < 0) ++i;\nwhile (i < 0) --i;\n\ndo ++i;\nwhile (i < 0)\ndo --i;\nwhile (i < 0)\n\nfor (let prop in { foo: 1 }) ++i;\nfor (let prop in { foo: 1 }) --i;\n\nfor (let foo of [1, 2]) ++i;\nfor (let foo of [1, 2]) --i;\n\nfor (let j = 0; j < 10; j++) ++i;\nfor (let j = 0; j < 10; j++) --i;\n",
                  "cooked": "let i = 0;\n\nif (i < 0) ++i;\nif (i < 0) --i;\n\nwhile (i < 0) ++i;\nwhile (i < 0) --i;\n\ndo ++i;\nwhile (i < 0)\ndo --i;\nwhile (i < 0)\n\nfor (let prop in { foo: 1 }) ++i;\nfor (let prop in { foo: 1 }) --i;\n\nfor (let foo of [1, 2]) ++i;\nfor (let foo of [1, 2]) --i;\n\nfor (let j = 0; j < 10; j++) ++i;\nfor (let j = 0; j < 10; j++) --i;\n"
                },
                "tail": true,
                "start": 477,
                "end": 804
              }
            ],
            "expressions": [],
            "start": 477,
            "end": 804
          }
        ],
        "optional": false,
        "start": 448,
        "end": 805
      },
      "start": 448,
      "end": 806
    }
  ],
  "sourceType": "script",
  "start": 429,
  "end": 807
}