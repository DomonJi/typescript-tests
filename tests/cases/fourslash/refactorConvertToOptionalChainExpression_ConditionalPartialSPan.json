{
  "type": "Program",
  "body": [
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "CallExpression",
        "callee": {
          "type": "MemberExpression",
          "object": {
            "type": "Identifier",
            "name": "goTo",
            "start": 155,
            "end": 159
          },
          "property": {
            "type": "Identifier",
            "name": "select",
            "start": 160,
            "end": 166
          },
          "computed": false,
          "optional": false,
          "start": 155,
          "end": 166
        },
        "arguments": [
          {
            "type": "Literal",
            "value": "a",
            "start": 167,
            "end": 170
          },
          {
            "type": "Literal",
            "value": "b",
            "start": 172,
            "end": 175
          }
        ],
        "optional": false,
        "start": 155,
        "end": 176
      },
      "start": 155,
      "end": 177
    },
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "CallExpression",
        "callee": {
          "type": "MemberExpression",
          "object": {
            "type": "Identifier",
            "name": "edit",
            "start": 179,
            "end": 183
          },
          "property": {
            "type": "Identifier",
            "name": "applyRefactor",
            "start": 184,
            "end": 197
          },
          "computed": false,
          "optional": false,
          "start": 179,
          "end": 197
        },
        "arguments": [
          {
            "type": "ObjectExpression",
            "properties": [
              {
                "type": "Property",
                "key": {
                  "type": "Identifier",
                  "name": "refactorName",
                  "start": 205,
                  "end": 217
                },
                "value": {
                  "type": "Literal",
                  "value": "Convert to optional chain expression",
                  "start": 219,
                  "end": 257
                },
                "computed": false,
                "method": false,
                "shorthand": false,
                "kind": "init",
                "start": 205,
                "end": 257
              },
              {
                "type": "Property",
                "key": {
                  "type": "Identifier",
                  "name": "actionName",
                  "start": 264,
                  "end": 274
                },
                "value": {
                  "type": "Literal",
                  "value": "Convert to optional chain expression",
                  "start": 276,
                  "end": 314
                },
                "computed": false,
                "method": false,
                "shorthand": false,
                "kind": "init",
                "start": 264,
                "end": 314
              },
              {
                "type": "Property",
                "key": {
                  "type": "Identifier",
                  "name": "actionDescription",
                  "start": 321,
                  "end": 338
                },
                "value": {
                  "type": "Literal",
                  "value": "Convert to optional chain expression",
                  "start": 340,
                  "end": 378
                },
                "computed": false,
                "method": false,
                "shorthand": false,
                "kind": "init",
                "start": 321,
                "end": 378
              },
              {
                "type": "Property",
                "key": {
                  "type": "Identifier",
                  "name": "newContent",
                  "start": 385,
                  "end": 395
                },
                "value": {
                  "type": "TemplateLiteral",
                  "quasis": [
                    {
                      "type": "TemplateElement",
                      "value": {
                        "raw": "let foo = { bar: { baz: 0 } };\r\nfoo.bar?.baz ?? \"whenFalse\";",
                        "cooked": "let foo = { bar: { baz: 0 } };\nfoo.bar?.baz ?? \"whenFalse\";"
                      },
                      "tail": true,
                      "start": 398,
                      "end": 460
                    }
                  ],
                  "expressions": [],
                  "start": 398,
                  "end": 460
                },
                "computed": false,
                "method": false,
                "shorthand": false,
                "kind": "init",
                "start": 385,
                "end": 460
              }
            ],
            "start": 198,
            "end": 463
          }
        ],
        "optional": false,
        "start": 179,
        "end": 464
      },
      "start": 179,
      "end": 465
    }
  ],
  "sourceType": "script",
  "start": 155,
  "end": 465
}