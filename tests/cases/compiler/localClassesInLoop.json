{
  "type": "Program",
  "body": [
    {
      "type": "TSDeclareFunction",
      "id": {
        "type": "Identifier",
        "name": "use",
        "start": 17,
        "end": 20
      },
      "generator": false,
      "expression": false,
      "async": false,
      "params": [
        {
          "type": "Identifier",
          "name": "a",
          "typeAnnotation": {
            "type": "TSTypeAnnotation",
            "typeAnnotation": {
              "type": "TSAnyKeyword",
              "start": 24,
              "end": 27
            },
            "start": 22,
            "end": 27
          },
          "start": 21,
          "end": 27
        }
      ],
      "declare": true,
      "start": 0,
      "end": 29
    },
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "Literal",
        "value": "use strict",
        "start": 33,
        "end": 45
      },
      "start": 33,
      "end": 45
    },
    {
      "type": "VariableDeclaration",
      "declarations": [
        {
          "type": "VariableDeclarator",
          "id": {
            "type": "Identifier",
            "name": "data",
            "start": 51,
            "end": 55
          },
          "init": {
            "type": "ArrayExpression",
            "elements": [],
            "start": 58,
            "end": 60
          },
          "start": 51,
          "end": 60
        }
      ],
      "kind": "var",
      "start": 47,
      "end": 61
    },
    {
      "type": "ForStatement",
      "init": {
        "type": "VariableDeclaration",
        "declarations": [
          {
            "type": "VariableDeclarator",
            "id": {
              "type": "Identifier",
              "name": "x",
              "start": 72,
              "end": 73
            },
            "init": {
              "type": "Literal",
              "value": 0,
              "start": 76,
              "end": 77
            },
            "start": 72,
            "end": 77
          }
        ],
        "kind": "let",
        "start": 68,
        "end": 77
      },
      "test": {
        "type": "BinaryExpression",
        "operator": "<",
        "left": {
          "type": "Identifier",
          "name": "x",
          "start": 79,
          "end": 80
        },
        "right": {
          "type": "Literal",
          "value": 2,
          "start": 83,
          "end": 84
        },
        "start": 79,
        "end": 84
      },
      "update": {
        "type": "UpdateExpression",
        "operator": "++",
        "prefix": true,
        "argument": {
          "type": "Identifier",
          "name": "x",
          "start": 88,
          "end": 89
        },
        "start": 86,
        "end": 89
      },
      "body": {
        "type": "BlockStatement",
        "body": [
          {
            "type": "ClassDeclaration",
            "id": {
              "type": "Identifier",
              "name": "C",
              "start": 104,
              "end": 105
            },
            "body": {
              "type": "ClassBody",
              "body": [],
              "start": 106,
              "end": 109
            },
            "superClass": null,
            "start": 98,
            "end": 109
          },
          {
            "type": "ExpressionStatement",
            "expression": {
              "type": "CallExpression",
              "callee": {
                "type": "MemberExpression",
                "object": {
                  "type": "Identifier",
                  "name": "data",
                  "start": 115,
                  "end": 119
                },
                "property": {
                  "type": "Identifier",
                  "name": "push",
                  "start": 120,
                  "end": 124
                },
                "computed": false,
                "optional": false,
                "start": 115,
                "end": 124
              },
              "arguments": [
                {
                  "type": "ArrowFunctionExpression",
                  "generator": false,
                  "id": null,
                  "params": [],
                  "body": {
                    "type": "Identifier",
                    "name": "C",
                    "start": 131,
                    "end": 132
                  },
                  "async": false,
                  "expression": true,
                  "start": 125,
                  "end": 132
                }
              ],
              "optional": false,
              "start": 115,
              "end": 133
            },
            "start": 115,
            "end": 134
          }
        ],
        "start": 91,
        "end": 137
      },
      "start": 63,
      "end": 137
    },
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "CallExpression",
        "callee": {
          "type": "Identifier",
          "name": "use",
          "start": 141,
          "end": 144
        },
        "arguments": [
          {
            "type": "BinaryExpression",
            "operator": "===",
            "left": {
              "type": "CallExpression",
              "callee": {
                "type": "MemberExpression",
                "object": {
                  "type": "Identifier",
                  "name": "data",
                  "start": 145,
                  "end": 149
                },
                "property": {
                  "type": "Literal",
                  "value": 0,
                  "start": 150,
                  "end": 151
                },
                "computed": true,
                "optional": false,
                "start": 145,
                "end": 152
              },
              "arguments": [],
              "optional": false,
              "start": 145,
              "end": 154
            },
            "right": {
              "type": "CallExpression",
              "callee": {
                "type": "MemberExpression",
                "object": {
                  "type": "Identifier",
                  "name": "data",
                  "start": 159,
                  "end": 163
                },
                "property": {
                  "type": "Literal",
                  "value": 1,
                  "start": 164,
                  "end": 165
                },
                "computed": true,
                "optional": false,
                "start": 159,
                "end": 166
              },
              "arguments": [],
              "optional": false,
              "start": 159,
              "end": 168
            },
            "start": 145,
            "end": 168
          }
        ],
        "optional": false,
        "start": 141,
        "end": 169
      },
      "start": 141,
      "end": 170
    }
  ],
  "sourceType": "module",
  "start": 0,
  "end": 170
}