{
  "type": "Program",
  "body": [
    {
      "type": "TSDeclareFunction",
      "id": {
        "type": "Identifier",
        "name": "use",
        "start": 36,
        "end": 39
      },
      "generator": false,
      "expression": false,
      "async": false,
      "params": [
        {
          "type": "Identifier",
          "name": "a",
          "typeAnnotation": {
            "type": "TSTypeAnnotation",
            "typeAnnotation": {
              "type": "TSAnyKeyword",
              "start": 43,
              "end": 46
            },
            "start": 41,
            "end": 46
          },
          "start": 40,
          "end": 46
        }
      ],
      "declare": true,
      "start": 19,
      "end": 48
    },
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "Literal",
        "value": "use strict",
        "start": 52,
        "end": 64
      },
      "start": 52,
      "end": 64
    },
    {
      "type": "VariableDeclaration",
      "declarations": [
        {
          "type": "VariableDeclarator",
          "id": {
            "type": "Identifier",
            "name": "data",
            "start": 70,
            "end": 74
          },
          "init": {
            "type": "ArrayExpression",
            "elements": [],
            "start": 77,
            "end": 79
          },
          "start": 70,
          "end": 79
        }
      ],
      "kind": "var",
      "start": 66,
      "end": 80
    },
    {
      "type": "ForStatement",
      "init": {
        "type": "VariableDeclaration",
        "declarations": [
          {
            "type": "VariableDeclarator",
            "id": {
              "type": "Identifier",
              "name": "x",
              "start": 91,
              "end": 92
            },
            "init": {
              "type": "Literal",
              "value": 0,
              "start": 95,
              "end": 96
            },
            "start": 91,
            "end": 96
          }
        ],
        "kind": "let",
        "start": 87,
        "end": 96
      },
      "test": {
        "type": "BinaryExpression",
        "operator": "<",
        "left": {
          "type": "Identifier",
          "name": "x",
          "start": 98,
          "end": 99
        },
        "right": {
          "type": "Literal",
          "value": 2,
          "start": 102,
          "end": 103
        },
        "start": 98,
        "end": 103
      },
      "update": {
        "type": "UpdateExpression",
        "operator": "++",
        "prefix": true,
        "argument": {
          "type": "Identifier",
          "name": "x",
          "start": 107,
          "end": 108
        },
        "start": 105,
        "end": 108
      },
      "body": {
        "type": "BlockStatement",
        "body": [
          {
            "type": "ClassDeclaration",
            "id": {
              "type": "Identifier",
              "name": "C",
              "start": 123,
              "end": 124
            },
            "body": {
              "type": "ClassBody",
              "body": [],
              "start": 125,
              "end": 128
            },
            "superClass": null,
            "start": 117,
            "end": 128
          },
          {
            "type": "ExpressionStatement",
            "expression": {
              "type": "CallExpression",
              "callee": {
                "type": "MemberExpression",
                "object": {
                  "type": "Identifier",
                  "name": "data",
                  "start": 134,
                  "end": 138
                },
                "property": {
                  "type": "Identifier",
                  "name": "push",
                  "start": 139,
                  "end": 143
                },
                "computed": false,
                "optional": false,
                "start": 134,
                "end": 143
              },
              "arguments": [
                {
                  "type": "ArrowFunctionExpression",
                  "generator": false,
                  "id": null,
                  "params": [],
                  "body": {
                    "type": "Identifier",
                    "name": "C",
                    "start": 150,
                    "end": 151
                  },
                  "async": false,
                  "expression": true,
                  "start": 144,
                  "end": 151
                }
              ],
              "optional": false,
              "start": 134,
              "end": 152
            },
            "start": 134,
            "end": 153
          }
        ],
        "start": 110,
        "end": 156
      },
      "start": 82,
      "end": 156
    },
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "CallExpression",
        "callee": {
          "type": "Identifier",
          "name": "use",
          "start": 160,
          "end": 163
        },
        "arguments": [
          {
            "type": "BinaryExpression",
            "operator": "===",
            "left": {
              "type": "CallExpression",
              "callee": {
                "type": "MemberExpression",
                "object": {
                  "type": "Identifier",
                  "name": "data",
                  "start": 164,
                  "end": 168
                },
                "property": {
                  "type": "Literal",
                  "value": 0,
                  "start": 169,
                  "end": 170
                },
                "computed": true,
                "optional": false,
                "start": 164,
                "end": 171
              },
              "arguments": [],
              "optional": false,
              "start": 164,
              "end": 173
            },
            "right": {
              "type": "CallExpression",
              "callee": {
                "type": "MemberExpression",
                "object": {
                  "type": "Identifier",
                  "name": "data",
                  "start": 178,
                  "end": 182
                },
                "property": {
                  "type": "Literal",
                  "value": 1,
                  "start": 183,
                  "end": 184
                },
                "computed": true,
                "optional": false,
                "start": 178,
                "end": 185
              },
              "arguments": [],
              "optional": false,
              "start": 178,
              "end": 187
            },
            "start": 164,
            "end": 187
          }
        ],
        "optional": false,
        "start": 160,
        "end": 188
      },
      "start": 160,
      "end": 189
    }
  ],
  "sourceType": "script",
  "start": 19,
  "end": 189
}