{
  "type": "Program",
  "body": [
    {
      "type": "TSTypeAliasDeclaration",
      "id": {
        "type": "Identifier",
        "name": "T",
        "start": 5,
        "end": 6
      },
      "typeAnnotation": {
        "type": "TSConditionalType",
        "checkType": {
          "type": "TSAnyKeyword",
          "start": 9,
          "end": 12
        },
        "extendsType": {
          "type": "TSNumberKeyword",
          "start": 21,
          "end": 27
        },
        "trueType": {
          "type": "TSLiteralType",
          "literal": {
            "type": "Literal",
            "value": 1,
            "start": 30,
            "end": 31
          },
          "start": 30,
          "end": 31
        },
        "falseType": {
          "type": "TSLiteralType",
          "literal": {
            "type": "Literal",
            "value": 0,
            "start": 34,
            "end": 35
          },
          "start": 34,
          "end": 35
        },
        "start": 9,
        "end": 35
      },
      "start": 0,
      "end": 36
    },
    {
      "type": "VariableDeclaration",
      "declarations": [
        {
          "type": "VariableDeclarator",
          "id": {
            "type": "Identifier",
            "name": "x",
            "typeAnnotation": {
              "type": "TSTypeAnnotation",
              "typeAnnotation": {
                "type": "TSTypeReference",
                "typeName": {
                  "type": "Identifier",
                  "name": "T",
                  "start": 45,
                  "end": 46
                },
                "start": 45,
                "end": 46
              },
              "start": 43,
              "end": 46
            },
            "start": 42,
            "end": 46
          },
          "init": null,
          "start": 42,
          "end": 46
        }
      ],
      "kind": "let",
      "start": 38,
      "end": 47
    },
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "AssignmentExpression",
        "operator": "=",
        "left": {
          "type": "Identifier",
          "name": "x",
          "start": 49,
          "end": 50
        },
        "right": {
          "type": "Literal",
          "value": 1,
          "start": 53,
          "end": 54
        },
        "start": 49,
        "end": 54
      },
      "start": 49,
      "end": 55
    },
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "AssignmentExpression",
        "operator": "=",
        "left": {
          "type": "Identifier",
          "name": "x",
          "start": 57,
          "end": 58
        },
        "right": {
          "type": "Literal",
          "value": 0,
          "start": 61,
          "end": 62
        },
        "start": 57,
        "end": 62
      },
      "start": 57,
      "end": 63
    },
    {
      "type": "TSTypeAliasDeclaration",
      "id": {
        "type": "Identifier",
        "name": "U",
        "start": 88,
        "end": 89
      },
      "typeAnnotation": {
        "type": "TSConditionalType",
        "checkType": {
          "type": "TSTupleType",
          "elementTypes": [
            {
              "type": "TSAnyKeyword",
              "start": 93,
              "end": 96
            }
          ],
          "start": 92,
          "end": 97
        },
        "extendsType": {
          "type": "TSTupleType",
          "elementTypes": [
            {
              "type": "TSNumberKeyword",
              "start": 107,
              "end": 113
            }
          ],
          "start": 106,
          "end": 114
        },
        "trueType": {
          "type": "TSLiteralType",
          "literal": {
            "type": "Literal",
            "value": 1,
            "start": 117,
            "end": 118
          },
          "start": 117,
          "end": 118
        },
        "falseType": {
          "type": "TSLiteralType",
          "literal": {
            "type": "Literal",
            "value": 0,
            "start": 121,
            "end": 122
          },
          "start": 121,
          "end": 122
        },
        "start": 92,
        "end": 122
      },
      "start": 83,
      "end": 123
    },
    {
      "type": "VariableDeclaration",
      "declarations": [
        {
          "type": "VariableDeclarator",
          "id": {
            "type": "Identifier",
            "name": "y",
            "typeAnnotation": {
              "type": "TSTypeAnnotation",
              "typeAnnotation": {
                "type": "TSTypeReference",
                "typeName": {
                  "type": "Identifier",
                  "name": "U",
                  "start": 132,
                  "end": 133
                },
                "start": 132,
                "end": 133
              },
              "start": 130,
              "end": 133
            },
            "start": 129,
            "end": 133
          },
          "init": null,
          "start": 129,
          "end": 133
        }
      ],
      "kind": "let",
      "start": 125,
      "end": 134
    },
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "AssignmentExpression",
        "operator": "=",
        "left": {
          "type": "Identifier",
          "name": "y",
          "start": 136,
          "end": 137
        },
        "right": {
          "type": "Literal",
          "value": 1,
          "start": 140,
          "end": 141
        },
        "start": 136,
        "end": 141
      },
      "start": 136,
      "end": 142
    },
    {
      "type": "ExpressionStatement",
      "expression": {
        "type": "AssignmentExpression",
        "operator": "=",
        "left": {
          "type": "Identifier",
          "name": "y",
          "start": 144,
          "end": 145
        },
        "right": {
          "type": "Literal",
          "value": 0,
          "start": 148,
          "end": 149
        },
        "start": 144,
        "end": 149
      },
      "start": 144,
      "end": 150
    }
  ],
  "sourceType": "script",
  "start": 0,
  "end": 159
}